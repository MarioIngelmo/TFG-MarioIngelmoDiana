plugins {
    id 'com.android.application'
    id "org.sonarqube" version "3.5.0.2730"
}

apply plugin: "jacoco"

jacoco {
    toolVersion = '0.8.7'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*'] // needed to support roboelectric with jacoco
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def mainSrc = "$project.projectDir/src/main/java"
    def javaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([javaTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec']))
}

sonarqube {
    properties {
        property "sonar.projectKey", "MarioIngelmo_TFG-MarioIngelmoDiana"
        property "sonar.organization", "marioingelmo"
        property "sonar.host.url", "https://sonarcloud.io"

        property "sonar.scm.disabled", true
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

android {
    compileSdk 33

            defaultConfig {
        applicationId "es.unican.hapisecurity"
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui:2.5.3'
    implementation 'com.android.car.ui:car-ui-lib:2.4.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'

    // ZXing para leer los codigos de barras
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'

    // GSON for json serialization/deserialization
    implementation 'com.google.code.gson:gson:2.9.0'

    // Retrofit (for REST API access) https://square.github.io/retrofit/
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Room (for database)
    def room_version = "2.4.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // picasso (for image loading from URL)
    implementation 'com.squareup.picasso:picasso:2.8'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
}
